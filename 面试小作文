您好，面试官，我叫陈恒韬，本科毕业于广州航海学院，毕业后当过大概2年linux运维工程师，和大概4年的ETL工程师。
在做ETL工程师期间，经历过3个数仓项目，在数仓项目里负责的工作包括项目相关业务调研、ETL整体流程的设计，调度和监控、对数据进行清洗、转换，编写日常工作所需的shell脚本。
在做好本职工作之上，还参与协助数仓模型的设计，项目文档的编写，报表的制作等，能够与业务员、架构师以及其他技术员进行有效的沟通和协作，保证项目工作能够高效展开实施。

最近一份工作是外包到泉州银行的贷款监控数仓项目。
该项目主要负责的内容有
1.项目前期参与业务调研，分析项目需求，明确数据域，构建业务矩阵，
2.参与数仓的维度模型设计和汇总模型设计，以星型模型为基础来设计维度模型，明确事实、维度、粒度、主题、指标等基本维度模型框架；
3.项目前期工作完成后，便进行日常的ETL工作，首先每天通过在我行自研的大数据平台里订阅上一天的业务相关的新增数据到数仓贴源层的当日分区里，
然后对这些贴源层新增数据作清洗转换，具体要清洗内容有：
（去异常：比如贷款申请表里有异常申请的，应该去掉，
去空：比如风险分类记录表里，因为有些贷款是首次参加风险分类的，所以这些记录里第二次分类为空，处理方式是用nvl函数将空值转换成固定标签+随机数，
统一数据格式：像日期有用斜杠做年月日之间的分隔的，我们会把这种日期用regexp_replace函数匹配出来并替换成年月日连续8位数字等，
统一数据类型：我做过的表里像贷款合同表里的有些日期用的是date，像放款日期，有些用的是varchar2，比如还款日期，处理方式是用cast函数统一把date转成字符串类型。）
完成清洗转换后，根据表的内容把清洗好的数据加载到事实层或维度层里，
像贷款账户交易表这种业务关注的核心数据表，就用insert overwrite语句增量插入到事实层对应明细表的当日新增分区里，
像客户信息表，地区代码表，贷款合同表等偏业务环境描述的表就用insert overwrite语句以拉链表或全量或增量形式插入到维度层的维度表里，
之后再把贷款主题相关的表如贷款账户还款处理明细表，贷款交易明细表，贷款逾期明细表，客户维度表，贷款合同维度表等表聚合成贷款监控宽表，
最后再根据项目给定的指标在宽表层上作进一步的聚合，进而输出像贷款五级分类报表，（贷款申请通过率监控报表）等报表；

数据来源的系统有核心系统，ECIF系统


hive拉链表：https://blog.csdn.net/weixin_46389691/article/details/127973319
先对历史表跟增量表进行左连接，如果增量表没有或已经是历史数据的，就做保留，
增量表有且历史表是有效记录的，就对历史表作更新，将有效时间改成系统时间的上一天，
这个过程就完成对历史拉链表的更新，最后再union all增量表就可以生成新的历史拉链表了

输出文档：mapping文档，模型文档，概要文档，详细文档，测试文档（sit，uat），上线文档

人员：共8人，1 项目经理，1 建模师，4 ETL工程师，1 测试工程师，1 报表工程师

每日总数据量：400万行
总数据量：210多亿行
单表单日新增数据量：50w行
最大单表数据量：27亿行
客户量：360w

银行系统：
BBS：票据系统	
CBS：核心系统
CCP：信用卡系统
CCS：对公信贷管理系统
CIF：ECIF系统
ERP：财务管理系统
HRM：人力资源管理系统
MCS：小微贷款系统00
NBS：网上银行系统
PCS：零售信贷系统


主题：
客户，银行卡，存款，交易，贷款，渠道，中间业务，总账

贷款流程：注册--ocr认证---md5认证----借贷申请---信用资料---初审---终审---结果是否通过（否，提请复议---复议审核---是否通过)
          ---产生额度---通知客户---额度匹配--提款请求---提款审核---是否通过---签订协议
		  ---放款---还款---是否逾期---是否结清--结清--结束
		  
贷前：注册平台且提交申请资料，ocr认证、md5认证，审批
贷中：客户提出提款申请，进入审核，通过签订协议；
贷后：围绕平台放款，还款工作；

表内利息：指正常的贷款利息收入    表外利息: 指逾期贷款的利息收入     税务处理有差异

贷款主题
表：客户信息表，授信申请表，授信额度表，授信审批信息表，贷款申请表，贷款审批信息表，贷款账户交易表，贷款账户主表，贷款账户还款计划表，贷款账户还款信息表，贷款借据信息表，贷款合同信息表，贷款核销信息表

1.1.贷款申请通过率监控报表
表：客户信息表，贷款申请表，贷款审核表，贷款通过表

1）作用：监控申请通过率和申请的额度情况
2）指标及计算口径：
       申请量：突然起量时，要尤其关注是否存在欺诈风险。量萎缩明显时，也要关注原因，以免对利润产生影响
       通过率：通过数量 / 申请数量
       平均贷款额：总贷款额 / 通过人数
3）维度：申请时间(天/周/月)，认证方式，用户类型
5）分析角度：过低则说明客群质量不佳，过高则存在包装申请资料的风险


1.2.贷款五级分类报表
表：还款表：贷款借据号，还款账号，贷款余额，逾期天数，逾期期数，当前期数
    贷款借据信息表：贷款借据号，贷款账号，客户号，贷款合同号，总期数，当前已还款期数，每期还款额，贷款金额，贷款余额，执行利率，五级分类，逾期本金金额，当前逾期期数，逾期天数，放款账号，还款账号，还款间隔，贷款损失准备金额，最后更新时间
	贷款合同信息表：贷款合同号，贷款账号，贷款种类，贷款总金额，贷款余额，贷款期限，放款日期，放款账号，还款日，还款间隔，还款账号，执行利率，抵押物大类，担保方式，当前逾期期数，逾期金额
	
	贷款核销信息：贷款借据号，核销本金，核销利息，开始时间
    
统计粒度：以一个贷款借据号为一个记录

指标： 
      贷款申请通过率 = 当年贷款通过数量 / 当年贷款申请数量
	  （贷款申请表，贷款审批信息表）
	  
	  提现率 = 当年内授信后90天内申请提现用户数 / 当年内授信成功用户数
      （（授信审批信息表，筛选审批成功的客户） join （贷款申请表，客户ID去重） on a.客户ID = b.客户ID）
	  
	  
	  贷款拨备率 = 贷款损失准备金 / 总贷款余额 （这个指标反应了商业银行整体的拨备计提水平，是衡量银行抵御金融风险能力的重要指标之一）
	  
	  拨备覆盖率 = 贷款损失准备金 / 总不良贷款 （这个指标主要用于衡量银行对不良贷款的风险准备是否充足）
	                                       （贷款拨备率侧重于反映银行为应对贷款损失而准备的资金充足程度，而拨备覆盖率则侧重于评估银行是否充分计提了贷款损失准备金，以应对不良贷款的风险）
      
	  逾期贷款率 = 逾期贷款余额/各项贷款余额 （侧重反映整体的贷款偿还情况）
	   
	  不良贷款率 = 不良贷款余额/各项贷款余额=（次级类贷款余额+可疑类贷款余额+损失类贷款余额）/各项贷款余额。（监管要求警戒线2%）
      
	  不良贷款生成率 = (本期不良贷款余额 - 上期不良贷款余额 + 本期核销的不良贷款) / 上期贷款余额
	  
	  
	  贷款增长率 = （本期贷款余额 - 上期贷款余额） / 上期贷款余额 
	  
	  复借率 = (再次借贷借款人数量 / 总贷款人数量) × 100%‌
	  
	  提前结清率 = 提前结清借据数 / 总借据数

指标计算:
再次借贷借款人数量:当年内有两份借据以上，且第一份借据已结清，再用count计算客户数量

次级类/可疑类/损失类/总贷款余额= 逾期天数 > 90 and 数据日期 = '采集日期' and 贷款发放日期 between 采集日期年初 and 采集日期
					
逾期贷款余额= 逾期天数 > 90 and 数据日期 = '采集日期' and 贷款发放日期 between 采集日期年初 and 采集日期 and 信贷业务品种号 like '0202%'
										  
期末不良贷款：逾期天数 > 120 and 数据日期 = '采集日期' and 贷款发放日期 between 采集日期年初 and 采集日期 and 信贷业务品种号 like '0202%'

期初不良贷款：逾期天数 > 120 and 数据日期 = last_day(add_months('采集日期',-1))+1 and 贷款发放日期 between 采集日期年初 and 采集日期 and 信贷业务品种号 like '0202%'

核销不良贷款：数据日期 = '采集日期' and 贷款发放日期 between 采集日期年初 and 采集日期 and 信贷业务品种号 like '0202%'，从贷款核销信息表筛选出本期的核销收回本金，并进行聚合

期初贷款余额：数据日期 = last_day(add_months('采集日期',-1))+1 and 贷款发放日期 between 采集日期年初 and 采集日期 and 信贷业务品种号 like '0202%'


事实表
贷款账户还款处理事实表（Loan_Account_Fact） from 贷款账户还款处理表
1.Loan_Account_ID （贷款账户ID，主键）
2.贷款借据号 (主键)
3.Customer_ID （客户ID，外键到客户维度表）
4.Loan_Product_ID （贷款产品ID，外键到产品维度表）
5.Loan_Start_Date （贷款开始日期）
6.Loan_End_Date （贷款结束日期）
7.Total_Loan_Amount （总贷款金额）
8.贷款余额
9.当前期数

贷款交易事实表（Loan_Transaction_Fact）
1.Transaction_ID （交易ID，主键）
2.Loan_Account_ID （贷款账户ID，外键）
3.Transaction_Date （交易日期，外键到时间维度表）
4.Transaction_Type （交易类型，还款、提款）
5.Transaction_Amount （交易金额）
6.Outstanding_Balance （未偿还余额）

贷款账户借据事实表
1.Loan_Account_ID （贷款账户ID）
2.贷款借据号 (主键)
3.客户号
4.贷款合同号
5.总期数
6.贷款金额
7.贷款余额
8.当前已还款期数
9.五级分类
10.逾期本金金额
11.逾期期数
12.逾期天数
13.贷款损失准备金额

贷款合同事实表 from 贷款合同表
1.合同编号 （主键）
2.贷款账号
3.贷款种类
4.贷款总金额
5.贷款余额
6.贷款期限
7.担保方式
8.抵押物大类

核销信息事实表
1.贷款借据号 主键
2.贷款账号 外键
3.核销贷款余额
4.核销贷款拖欠利息
5.核销贷款拖欠复利
6.核销日期


维度表
客户维度表（Customer_Dimension）from 客户信息表
1.Customer_ID （客户ID，主键）
2.Customer_Name （客户姓名）
3.Date_of_Birth （出生日期）
4.Occupation （职业）
5.Contact_Details （联系方式）

产品维度表（Product_Dimension）
1.Loan_Product_ID （贷款产品ID，主键）
2.Product_Name （产品名称）
3.Interest_Rate_Type （利率类型）
4.Loan_Term （贷款期限）

担保物维度表
1.合同编号
2.担保物编号
3.担保物类型
4.评估值
5.抵押率
6.担保物名称

抵押物维度表
1.合同编号
2.抵押人
3.抵押物类型
4.交易价值

逾期维度表
1.贷款借据号
2.逾期天数
3.逾期期数


信贷业务流程：
贷款五级分类
正常，关注，次级，可疑，损失
正常贷款核心定义：债务人能够履行合同，没有足够理由怀疑债务人不能按时足额偿还债务。
关注贷款核心定义：1<贷款逾期天数<90，尽管债务人目前有能力偿还债务，但存在一些可能对偿还产生不利影响的因素，尽管债务人目前有能力偿还债务，但存在一些可能对偿还产生不利影响的因素。
次级贷款核心定义：91<贷款逾期天数<120，债务人的还款能力出现明显问题，完全依靠其正常营业收入无法足额偿还贷款本息，即使执行担保，也可能会造成一定损失。
可疑贷款核心定义：121<贷款逾期天数<180，借款人无法足额偿还贷款本息，即使执行担保，也肯定要造成较大损失。
损失贷款核心定义：贷款逾期天数>180，在采取所有可能的措施或一切必要的法律程序之后，本息仍然无法收回，或只能收回极少部分。

贷前: 事实表 维度表
贷款申请 贷款申请流水表、贷款申请明细 客户信息、地域、年龄、申请渠道
贷款核查 核查明细表、核查流水表 还款能力、教育背景、就业
征信上报 征信上报流水表
贷款审批 贷款审批流水表、流水明细表
贷款开户 开户审批流水、明细表 产品
贷款放贷 放款流水、明细表 金额

贷中：
利率调整 流水表、明细表、客户申请表 客户申请维度
贷款还款 流水表、明细表 客户、产品、还款渠道
贷款延期 贷款延期申请表、流水表 产品、户口

贷后：
贷后催收 贷后催收流水、明细 客户信息、地域
贷后核销 贷后核销流水、明细 客户、产品、征信

信贷业务
信贷业务从业务流转来看，分为贷前、贷中、贷后。不同的环节，继续拆分:
贷前又分为:
贷款申请、贷款审查、贷款审批、贷款开户、贷款发放。贷中细分为贷款计息、贷款利率调整、贷款还款、贷款展期、贷款形态转移。贷后细分为催收/委外、贷款核销、结清销户。
在日常工作当中，信贷业务的拆分更加详细，细致到了功能模块，站在个人的角度，信贷业务流程可以拆分为以下节点产品设计、产品营销、获取用户、账号注册、信息收集、授信审批、额度审批、账户冻结/解冻、借款提现、提现审批、发放贷款、贷款计息、放款展示、征信上报、贷款还款、贷中监控、提额/降额、展期/缩期、催收/委外、贷款核销、结清销户。


大数据风控 - 报表监控体系
1. 贷前监控
2. 贷中监控
3. 贷后监控
在信贷反欺诈领域，报表监控也是风险管理过程中非常重要的工作内容，由于数据量大、数据维度多且涉及到多个环节，报表监控能够监控和分析客户在各个流程的状态，以便于策略人员了解资产质量、产品分布、模型效果等。以下为总结的一些可以监控的数据维度。
1. 贷前监控
贷前报表可以从业务、数据、模型等层面进行监控。
业务层面：可以监控进件量、准入策略通过量(率)[如:人行征信]、内部风控策略通过量(率)、报单量(率)、审批通过量(率)、放款量(率)，放款金额、件均金额等，公司每日的运营情况一目了然，如下例：数据层面：可以监测变量的缺失率、异常率、变量分布等，如果从系统层考虑也可以监测数据调用失败的情况。
模型层面：主要监测现有风控策略的情况，可以监控总体风控策略通过率、各规则命中情况、评分卡可以监控 PSI。可以观测每天各规则命中情况及各规则每天的命中情况，可以根据策略的运行效果以及公司政策对策略进行调整。

2. 贷中监控以下为贷中监控常用的监控指标：
Vintage 就是帐龄，Flow Rate 滚动率，CPI 账户逾期率，API 金额逾期率，FSTQPD 就是首逾、首二逾、首三逾、首四逾
整体情况：
逾期情况：
资产质量情况：
流转率：可以用于评估催收的绩效
假设从 M2->M3 的借款人，流转率为 40%，说明逾期60 天以上的到逾期 90 天这个阶段的借款有 60%都回款了，一般来说，逾期期数越高，流转率越高，回款率越低

3. 贷后监控
贷后可以监控分析逾期客户的特征和催收情况
贷后特征监控：可以后续的模型迭代优化提供数据支撑，可以从以下特征进行分析监控
客户特征： 性别、年龄、婚姻状况、学历等
地域特征： 省份、大区、城市等
放款时段： 季节、月份、工作日、非工作日、节假日等
产品特征： 产品种类、贷款期数等
贷款标的物特征等（车贷、房贷可以参考）
催收情况：
可以区分 M1、M2、M3+监控每日催回笔数和催回金额的情况
可以监测催收人员拨打电话数、催收电话时长、回款数等，及时对催收策略进行调整和优化，以便提高催收效率。

巴塞尔协议I
主要内容就是银行的放贷规模必须以自有的资本金想匹配想挂钩，银行风险管理手册。

巴塞尔协议一二三的区别
巴塞尔协议I、II、III之间的主要区别体现在监管目标、‌风险覆盖范围、‌资本充足率要求以及监管框架的构成上。这些区别反映了银行监管标准的逐步发展和完善，以应对日益复杂的金融风险。

巴塞尔协议I
时间：1988年7月颁布。
核心内容：确立了以风险为基础的资本充足率标准，包括资本定义、风险加权资产（RWA）的计量方法，以及最低资本充足率要求（核心资本充足率4%，总资本充足率8%）。
风险覆盖：主要关注信用风险，对市场风险和操作风险的覆盖较少。

巴塞尔协议II
时间：2004年6月正式实施。
核心内容：构建了以“最低资本要求、监管部门的监督检查和市场约束”为三大支柱的监管框架，扩大了风险计量范围，包括信用风险、市场风险和操作风险。
风险覆盖：引入了内部评级法，允许银行基于内部模型计量各类风险，并强调基于全面风险评估进行资本管理。
资本充足率=（资本-扣除项）/风险加权资产，要求资本充足率8%，核心资本充足率4%

巴塞尔协议III
时间：2010年12月发布，2013年1月1日起实施。
核心内容：在巴塞尔协议II的基础上，进一步提高了资本充足率要求，引入了反周期超额资本，并严格了资本扣除限制，以应对金融危机后的银行监管需求。
风险覆盖：继续强化对信用风险、市场风险和操作风险的监管，并提出了更严格的资本和流动性要求。

巴III规定核心一级资本充足率为4.5%，一级资本充足率为6%，总资本充足率为8%

总结
巴塞尔协议的这三个版本代表了银行监管标准的逐步发展和完善。从最初的关注信用风险到后来的全面风险管理，再到应对金融危机后的进一步强化，巴塞尔协议体现了对银行监管的不断适应和改进。这些协议共同构成了全球银行业监管的基础，确保了银行的稳健运营和金融系统的稳定


下游部门？上游部门？：下游部门是做报表的，上游是个贷业务的技术开发团队

统一授信和分销授信：

分桶：单个表数据量过大，加速join查询速度，数据抽样

时间戳与时间的相互转换：时间戳转时间-from_unixtime: select from_unixtime('20240926 12:00:00', 'yyyy-MM-dd HH:mm:ss');
                       时间转时间戳-unix_timestamp: select unix_timestamp('20240926', 'yyyyMMdd');

distinct 与group by区别和效率：distinct需要对比表中每一行，而groupby 是分组处理
(not) in 和 （not）exists的区别和效率

分区索引和全局索引的区别，分别在什么情况使用

子查询与join区别：

指标拆解是什么概念：

如何解决数据口径不一致问题，如何避免：
原因：1.业务视角和技术视角的差异
     2.不同部门使用相同指标的不同定义
     3.多样数据产品
处理方法：1.统一标准和规范：与业务进行研讨得出一致的数据标准
         2.构建数据词典，像码表等：明确各业务线的指标名称和内涵，明确指标的计算方式，数据来源，统计维度等
         3.利用数据产品和平台来保证数据口径统一
    
埋点数据？

A表3条，B表5条，两表内连接数据量：0-15，左连接数据量：3-15

保证数据质量：实现数据血源追踪，统一数据口径，数据清洗转换，做数据校验自查，SIT测试， UAT测试，做好版本回退计划

with临时表的优缺点：优点：1.一次分析，多次使用
                        2.增加sql的易读性
                   

同一客户可在同一银行开设多个贷款账号吗： 可以但共享额度

mapping设计过程：

map卡在66%-67%不动怎么处理：

目标表报主键冲突：

上游的数据如何保证正确：

票据和保函了解？

hive八位日期字符串转化为DATE类型：SELECT from_unixtime(unix_timestamp('20230101', 'yyyyMMdd'), 'yyyy-MM-dd') AS formatted_date;

为什么开启hive本地模式，好处，设置哪个参数？

最大单表数据量：27亿条

建立宽表的原则：宽表的好处：1.减少了重复工作和逻辑复杂度，查询性能的提升，从而使开发效率得到提升
                          2.统一指标口径
                          3.数据质量稳定，因为统一了数据粒度和指标口径，基于大宽表的开发能有效规避对业务理解的不透彻和逻辑错误，减少数据质量问题

               宽表的缺点：1.性能低：计算复杂，依赖多，依赖链路长
                          2.稳定性低：依赖多，短板理论
                          3.开发难度大、维护成本高：修改得在几千行sql代码里去加逻辑

               如何建立宽表：1.确定主键id：如借据id
                            2.确定对象属性：如借据表相关信息，客户姓名，贷款金额，贷款时间等
                            3.确定对象与对象之间的关系：借据所关联的合同，合同有什么相关信息等
                            4.确定对象的指标：该借据贷款余额，逾期天数，五级分类等

                原则：1.主次分离：冗余的信息越来越多，主题就被弱化，就得进行宽表拆分
                      2.冷热分离：多个表用前150个字段数据，一两个表用后50个字段数据，这种情况就得做冷热拆分
                      3.稳定与不稳定分离：如果宽表依赖外部大表补维度从而导致计算经常延迟，可考虑关联后退，即在报表层做关联，从而弱化宽表与不稳定依赖表的耦合

怎么对接：系统把任务发给项目经理，然后项目经理分配任务，然后自己找相应的业务沟通，根据任务要求做需求分析说明书，然后开发

业务需求：

连续登录问题：select id, count(1) as login_duration from 
             (select id, date, rn, date_sub(date, rn) as sub_date from 
             (select id, date, row_number() over(partition by id order by date) as rn from <table> group by id, date) a) b 
             group by id, sub_date 
             having login_duration >= 3;

数仓中表的命名规范，说一张表明（英文）：

不用拉链表的情况下保留历史数据：使用分区，把新数据加载到新分区中

hive比较两数值大小：select greatest(-1, 0, 5, 8, null) --null
                   select greatest(-1, 0, 5, 'a') --null #某column字段类型是string，而其他column字段是int/double/float,返回null
                   select least(-1, 0, 5, 8) -- -1


维度退化场景：1.定义：退化维度通常是指在事实表中直接包含维度表的某些属性
             2.目的：退化维度的主要目的是为了优化查询性能
             3.例子：如借据ID，本属于维度的一种，退化到事实表中让查询变得高效，减少的复杂度，让数据更直观易懂

数仓建模流程，解释概念模型，逻辑模型，物理模型：

如何保证数据一致性：与业务人员作研讨，确定数据口径

数据粒度：表中每行数据表示什么

数据中台功能：数据展示，数据上传，数据下载，SQL查询，运维中心，血缘追踪，任务调度

如何评判一个数仓模型的好坏：1.数据准确性：和原始数据作对比和校验
                           2.数据质量：数据完整性，一致性，准确性，可靠性，时效性，通过数据清洗，校验，补全等
                           3.数据建模：数仓模型建模考虑到数据维度，度量，关系等，需要关注模型的可扩展性，可维护性，易用性等
                           4.数据集成：数据来自多个不同的源，需要关注数据集成的效率，稳定性，准确性等
                           5.数据分析：数仓的目的，可通过选用该模型的业务多少，业务下游业务人员的评价来评判
                           6.成本效益：计算成本，存储成本，开发维护成本

数据少了：数据漂移
数据发散：
